/****MODEL****/
theory Oyster

begin

/* Channel rules */
rule ChanSndS:
	[SndS($A,$B,xn,x)]
	--[ChanSndS($A,$B,xn,x)]->
	[!Sec($A,$B,xn,x)]

rule ChanRcvS:
	[!Sec($A,$B,xn,x)]
	--[ChanRcvS($A,$B,xn,x)]->
	[RcvS($A,$B,xn,x)]

/****RULES****/


builtins: asymmetric-encryption

functions: bal/1

rule humansetup:
	[ Fr(~gid)
  	, Fr(~goid)
	]
	--[OnlyOnce()
	, Neq($oyster,$ccard)]->
	[ !Type($Human,'card',$oyster)
  	, !Type($Human,'card',$ccard)
  	, !Type($Human,'balance',bal($oyster))
  	, !Type($Human,'balance',bal($ccard))
  	, !Type($GateIn,'gid',~gid)
  	, !Type($GateIn,'goid',~goid)
  	, !Wallet($oyster,$ccard)
  	, !GateID($GateIn,~gid)
  	, !GateID($GateOut,~goid)
  	]

/* setup */
rule Setup: 
  	[ !Wallet($oyster,$ccard)
  	, !GateID($GateIn,~gid)
  	, !GateID($GateOut,~goid)
  	]
  	--[ Setup($Human)
  	, Roles($Human,$GateIn,$GateOut)
  	, GateIn($Human,$GateIn)
  	, GateOut($Human,$GateOut)
	]-> 
  	[ State($GateIn,'1',<~gid>)
  	, State($GateOut,'1',<~goid>)
  	, State($Human,'1',<$oyster,$ccard,bal($oyster),bal($ccard)>)
  	]

rule H_1:
	[ State($Human,'1',<$oyster,$ccard,bal($oyster),bal($ccard)>)]
	--[H()
	, Send($Human,'card',$oyster)
	, To($GateIn)
	]->
	[ State($Human,'2',<$oyster,$ccard,bal($oyster),bal($ccard)>)
	, SndS($Human,$GateIn,'card',$oyster)
	]

rule GateIn_1:
	[ State($GateIn,'1',<~gid>)
	, RcvS($Human,$GateIn,'card',$oyster)
	]
	--[Receive($GateIn,$Human,$oyster)
	, CommitGid($GateIn,$Human,~gid)]->
	[ State($GateIn,'2',<~gid,$Human,$oyster>)
	, SndS($GateIn,$Human,<'card','gid'>,<$oyster,~gid>)
	]

rule H_2:
	[ State($Human,'2',<$oyster,$ccard,bal($oyster),bal($ccard)>)
	, RcvS($GateIn,$Human,<'card','gid'>,<$oyster,~gid>)
	]
	--[H()
	, Receive($Human,$GateIn,~gid)
	, Send($Human,'card',$oyster)
	, Send($Human,'balance',bal($oyster))
	, Send($Human,'gid',~gid)
	, To($GateOut)]->
	[ State($Human,'3',<$oyster,$ccard,bal($oyster),bal($ccard),~gid>)
	, SndS($Human,$GateOut,<'card','balance','gid'>,<$oyster,bal($oyster),~gid>)
	]

rule GateOut_1:
	[ State($GateOut,'1',<~goid>)
	, RcvS($Human,$GateOut,<'card','balance','gid'>,<$oyster,bal($oyster),~gid>)
	]
	--[ Receive($GateOut,$Human,$oyster)
	, Receive($GateOut,$Human,bal($oyster))
	, Commit($GateOut,$Human,'finish')]->
	[ State($GateOut,'2',<~goid,$oyster,bal($oyster),~gid>)
	, SndS($GateOut,$Human,<'card','balance','finish'>,<$oyster,bal($oyster),'finish'>)
	]

rule H_3:
	[ State($Human,'3',<$oyster,$ccard,bal($oyster),bal($ccard),~gid>)
	, RcvS($GateOut,$Human,<'card','balance','finish'>,<$oyster,bal($oyster),'finish'>)
	]
	--[H()
	, Hfin($Human,'card',$oyster)]->
	[]
	 
/****ENDOFRULES****/

restriction notSameRole:
	"All H1 H2 GIN1 GIN2 GOUT1 GOUT2 #i #j. Roles(H1,GIN1,GOUT1) @i & Roles(H2,GIN2,GOUT2) @j ==>
		  not H1 = GIN1
		& not H1 = GIN2
		& not H1 = GOUT1
		& not H1 = GOUT2
		& not GIN1 = GOUT1
		& not GIN1 = GOUT2
		& H1 = H2
	"

restriction Inequality:
  "All x #i. Neq(x,x) @ #i ==> F"

restriction OnlyOnce:
  "All #i #j. OnlyOnce()@#i & OnlyOnce()@#j ==> #i = #j"

lemma Same_Card: all-traces
	"(All H oyster #j. Hfin(H,'card',oyster) @ j
	==> (Ex #t. Send(H,'card',oyster) @ t & t<j)
		& not (Ex ccard #c. Send(H,'card',ccard) @ c
		& not (ccard = oyster))
		)"

lemma Card_Clash: all-traces
	"(All H GateIn GateOut oyster gid #j #t. 
		Receive(GateOut,H,oyster) @ j & Commit(GateOut,H,'finish') @ j 
		& Receive(GateIn,H,oyster) @t  & CommitGid(GateIn,H,gid) @ t &  t<j & not (GateIn = GateOut) 
		==> not (Ex ccard #i #k . Receive(GateOut,H,ccard) @ i & Commit(GateOut,H,'finish') @ i & 
			Receive(GateIn,H,ccard) @ k & CommitGid(GateIn,H,gid) @ k & k<i & not oyster = ccard))"

lemma Complete_Journey: all-traces
	"(All H oyster #j. Hfin(H,'card',oyster) @ j ==> (Ex GateIn m #i. CommitGid(GateIn,H,m) @i & i<j))"

/* Exists a trace */

lemma functional: exists-trace
	"(All H1 H2 #i #j. Setup(H1) @i & Setup(H2) @j ==> #i = #j) 
	& (Ex H oyster GateOut #k #n  
		.
		Hfin(H,'card',oyster) @k
		& Commit(GateOut,'Human','finish') @n
		)"

end

/****ENDOFMODEL****/
